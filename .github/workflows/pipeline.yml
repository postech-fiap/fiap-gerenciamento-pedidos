name: pipeline
on: [push]

jobs:

  unit-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout / copy repo app
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - run: gradle test

  build:
    runs-on: ubuntu-latest
    needs: unit-test
    steps:
      - name: Checkout / copy repo app
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Validate Gradle wrapper
        uses: gradle/wrapper-validation-action@ccb4328a959376b642e027874838f60f8e596de3

      - name: Run the Gradle package task
        run: gradle app:api:build

  sonar-cloud:
    runs-on: ubuntu-latest
    needs: build
    steps:
      - name: Checkout / copy repo app
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: SonarCloud Scan
        uses: sonarsource/sonarcloud-github-action@master
        env:
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          args: >
            -Dsonar.organization=postech-fiap
            -Dsonar.projectKey=postech-fiap_fiap-gerenciamento-pedidos

  docker-app-image:
    runs-on: ubuntu-latest
    needs: sonar-cloud
    steps:
      - name: Checkout / copy repo app
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Login Docker Hub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

      - name: Build docker image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/api-0.0.1-snapshot .

      - name: Push image docker
        run: docker push ${{ secrets.DOCKER_USERNAME }}/api-0.0.1-snapshot

  deploy-to-aws-ec2-instance:
    runs-on: aws-ec2
    needs: docker-app-image
    steps:
      - name: Docker pull image
        run: docker pull ${{ secrets.DOCKER_USERNAME }}/api-0.0.1-snapshot:latest

      - name: Delete old container
        run: docker rm -f fiap-container-app

      - name: Run docker container
        run: |
          docker run -d \
            -e MYSQL_ROOT_USERNAME='${{ secrets.MYSQL_ROOT_USERNAME }}' \
            -e MYSQL_ROOT_PASSWORD='${{ secrets.MYSQL_ROOT_PASSWORD }}' \
            -e MYSQL_HOST='${{ secrets.MYSQL_HOST }}' \
            -e MYSQL_DB='${{ secrets.MYSQL_DB }}' \
            -e MERCADO_PAGO_USER_ID='${{ secrets.MERCADO_PAGO_USER_ID }}' \
            -e MERCADO_PAGO_EXTERNAL_ID='${{ secrets.MERCADO_PAGO_EXTERNAL_ID }}' \
            -e MERCADO_PAGO_TOKEN='${{ secrets.MERCADO_PAGO_TOKEN }}' \
            -e MERCADO_PAGO_WEBHOOK_URL='${{ secrets.MERCADO_PAGO_WEBHOOK_URL }}' \
            -p 8080:8080 \
            --name fiap-container-app ${{ secrets.DOCKER_USERNAME }}/api-0.0.1-snapshot

  deploy-Stg-Feature:
    runs-on: ubuntu-latest
    needs: sonar-cloud
    environment:
      name: stg-feature

    if: startsWith(github.ref, 'refs/heads/feature/')
    steps:
      - name: Deploy
        shell: bash
        run: |
          echo "Deploy STG (Feature)"

  deploy-Stg-Develop:
    runs-on: ubuntu-latest
    needs: sonar-cloud
    environment:
      name: stg-develop

    if: github.ref == 'refs/heads/develop'
    steps:
      - name: Deploy
        shell: bash
        run: |
          echo "Deploy STG (Develop)"

  deploy-Pre-Release:
    runs-on: ubuntu-latest
    needs: sonar-cloud

    if: startsWith(github.ref, 'refs/heads/release/')
    environment:
      name: pre
    steps:
      - name: Deploy
        shell: bash
        run: |
          echo "Deploy PRE (Release)"

  deploy-Prod-Main:
    runs-on: ubuntu-latest
    needs: sonar-cloud

    if: github.ref == 'refs/heads/main'
    environment:
      name: prod
    steps:
      - name: Deploy
        shell: bash
        run: |
          echo "Deploy PROD (Main)"